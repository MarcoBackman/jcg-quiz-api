name: Deploy NestJS to EC2

on:
  push:
    branches:
      - main # Trigger deployment on pushes to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest # GitHub Actions runner environment

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Checkout your repository code

      - name: Set up SSH agent
        uses: webfactory/ssh-agent@v0.9.0 # Action to set up SSH agent with your private key
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }} # Use the SSH private key from GitHub Secrets

      - name: Add EC2 Host to known_hosts
        # This step ensures the EC2 host's fingerprint is added to known_hosts
        # to prevent SSH connection prompts in non-interactive environment.
        run: |
          mkdir -p ~/.ssh # Create .ssh directory if it doesn't exist
          # Use ssh-keyscan to fetch the host key securely.
          # The -H flag ensures only the hostname is used in known_hosts entry.
          ssh-keyscan -H "$EC2_HOST" >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts # Set correct permissions for known_hosts file
        env:
          # Define EC2_HOST directly in env for this step, matching your provided template
          EC2_HOST: ec2-15-164-171-168.ap-northeast-2.compute.amazonaws.com # Your EC2 DNS

      - name: Setup Node.js environment
        uses: actions/setup-node@v4 # Action to set up Node.js
        with:
          node-version: '20' # Specify your NestJS project's Node.js version

      - name: Install NestJS dependencies
        run: npm install # Install Node.js dependencies for your project

      - name: Build NestJS project
        run: npm run build # Build your NestJS application (creates the 'dist' folder)

      - name: Deploy application files and manage with PM2
        # This step combines SSH commands for EC2 setup and local rsync for file transfer.
        run: |
          # --- Remote commands executed on EC2 via SSH ---
          ssh -t "$EC2_USER"@"$EC2_HOST" "
            # --- Install rsync if not found (for Amazon Linux) ---
            if ! command -v rsync &> /dev/null; then
              echo 'rsync not found on EC2, installing...';
              sudo yum install rsync -y;
            else
              echo 'rsync is already installed on EC2.';
            fi;

            # --- Create application directory ---
            APP_DIR='/home/$EC2_USER/nestjs-app';
            mkdir -p \"$APP_DIR\";
            echo \"Application directory created/ensured: $APP_DIR\";

            # --- Install PM2 if not found ---
            # Using npm install -g pm2 via SSH
            if ! command -v pm2 &> /dev/null; then
              echo 'PM2 not found on EC2, installing globally...';
              # Ensure npm's global bin is in PATH for this session if not by default
              export PATH=\$PATH:$(npm config get prefix)/bin;
              npm install -g pm2;
              echo 'PM2 installed.';
            else
              echo 'PM2 is already installed on EC2.';
            fi;

            # --- Stop and delete existing PM2 process for clean restart ---
            pm2 delete nestjs-app || true; # '|| true' prevents error if process doesn't exist

            # --- Navigate to app directory for PM2 to find package.json and dist ---
            cd \"$APP_DIR\";

            # --- Start NestJS application with PM2 and environment variables ---
            # Note: For security, sensitive keys like AI_API_KEY should ideally be
            # injected via AWS Systems Manager Parameter Store or Secrets Manager
            # and accessed by your app, rather than directly in PM2 commands.
            # However, for direct passing as requested:
            pm2 start dist/main.js --name nestjs-app --interpreter node -- \
              --env PORT=3000 \
              --env CORS_ORIGIN='${{ vars.CORS_ORIGIN || 'http://localhost:8080' }}' \
              --env API_PREFIX='${{ vars.API_PREFIX || 'api' }}' \
              --env AI_API_BASE_URL='${{ vars.AI_API_BASE_URL || 'https://generativelanguage.googleapis.com/v1beta/models/' }}' \
              --env AI_API_KEY='${{ secrets.AI_API_KEY }}' \
              --env AI_AGENT='${{ vars.AI_AGENT || 'gemini-2.0-flash' }}';

            # --- Save PM2 process list and configure startup on boot ---
            pm2 save;
            # This generates a systemd script to ensure PM2 processes restart after reboot
            # Adjust the PATH if pm2 is not found by sudo, e.g., include ~/.nvm/.../bin
            sudo env PATH=\$PATH:$(npm bin -g) pm2 startup systemd -u $EC2_USER --hp /home/$EC2_USER;

            pm2 list; # List running PM2 processes to confirm NestJS app is running
          "
          # --- Local rsync commands (from GitHub Actions runner to EC2) ---
          # These commands run on the GitHub Actions runner, connecting to EC2 via SSH.
          APP_DIR_REMOTE="/home/${EC2_USER}/nestjs-app" # Define target directory for rsync
          
          # -a: archive mode (preserves permissions, timestamps, etc.)
          # -v: verbose
          # -z: compress file data during transfer
          # -e "ssh ...": specifies SSH as the remote shell. StrictHostKeyChecking=no bypasses prompt.
          # --delete: deletes extraneous files from dest dir (useful for clean updates, syncs source and dest)
          echo "Copying built NestJS dist/ folder..."
          rsync -avz --delete -e "ssh -o StrictHostKeyChecking=no" ./dist/ "$EC2_USER"@"$EC2_HOST":"$APP_DIR_REMOTE/dist/"
          
          echo "Copying package.json..."
          rsync -avz -e "ssh -o StrictHostKeyChecking=no" ./package.json "$EC2_USER"@"$EC2_HOST":"$APP_DIR_REMOTE/"
          
          echo "Copying package-lock.json..."
          rsync -avz -e "ssh -o StrictHostKeyChecking=no" ./package-lock.json "$EC2_USER"@"$EC2_HOST":"$APP_DIR_REMOTE/" # Or yarn.lock if applicable
        env:
          # Define EC2_USER and EC2_HOST directly in env for this step
          EC2_USER: ec2-user # For Amazon Linux 2/2023
          EC2_HOST: ec2-15-164-171-168.ap-northeast-2.compute.amazonaws.com # Your EC2 DNS
          # Default values for vars if they are not set (for safety)
          CORS_ORIGIN: ${{ vars.CORS_ORIGIN || 'http://localhost:8080,http://example.com' }}
          API_PREFIX: ${{ vars.API_PREFIX || 'api' }}
          AI_API_BASE_URL: ${{ vars.AI_API_BASE_URL || 'https://generativelanguage.googleapis.com/v1beta/models/' }}
          AI_AGENT: ${{ vars.AI_AGENT || 'gemini-2.0-flash' }}

      - name: Configure Nginx as Reverse Proxy and Reload
        # This step creates an Nginx config file on EC2 and reloads Nginx.
        run: |
          # Define Nginx configuration content for NestJS reverse proxy
          NGINX_CONFIG="
            server {
                listen 80;
                server_name $EC2_HOST; # Use your EC2 DNS or domain name

                location / {
                    proxy_pass http://localhost:3000; # NestJS app runs on port 3000
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host \$host;
                    proxy_cache_bypass \$http_upgrade;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for
