name: Deploy NestJS to EC2

on:
  push:
    branches:
      - main # Trigger deployment on pushes to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest # GitHub Actions runner environment

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Checkout your repository code

      - name: Set up SSH agent
        uses: webfactory/ssh-agent@v0.9.0 # Action to set up SSH agent with your private key
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }} # Use the SSH private key from GitHub Secrets

      - name: Add EC2 Host to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H "$EC2_HOST" >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts
        env:
          EC2_HOST: ec2-15-164-171-168.ap-northeast-2.compute.amazonaws.com

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install NestJS dependencies
        run: npm install

      - name: Build NestJS project
        run: npm run build

      - name: Debug AI_API_KEY (Temporary - REMOVE AFTER DEBUGGING!)
        run: |
          API_KEY="${{ secrets.AI_API_KEY }}"
          echo "AI_API_KEY length: ${#API_KEY}"
          echo "AI_API_KEY first 5 chars: ${API_KEY:0:5}..."
          # The full key will be masked, but length and prefix can be revealing.
          # Example of full key masking (will show ***):
          # echo "Full AI_API_KEY: $API_KEY"
        shell: bash

      - name: Deploy application files and manage with PM2
        run: |
          EC2_USER_VAL="ec2-user"
          EC2_HOST_VAL="ec2-15-164-171-168.ap-northeast-2.compute.amazonaws.com"
          
          APP_NAME="jcg-quiz-api"
          REMOTE_APP_DIR="/home/${EC2_USER_VAL}/${APP_NAME}"

          ssh -t "${EC2_USER_VAL}"@"${EC2_HOST_VAL}" "
            if ! command -v rsync &> /dev/null; then
              echo 'rsync not found on EC2, installing...';
              sudo yum install rsync -y;
            else
              echo 'rsync is already installed on EC2.';
            fi;

            mkdir -p \"${REMOTE_APP_DIR}\";
            echo \"Application directory created/ensured: ${REMOTE_APP_DIR}\";

            if ! command -v pm2 &> /dev/null; then
              echo 'PM2 not found on EC2, installing globally...';
              export PATH=\$PATH:$(npm config get prefix)/bin;
              npm install -g pm2;
              echo 'PM2 installed.';
            else
              echo 'PM2 is already installed on EC2.';
            fi;
          "

          echo "Copying built NestJS dist/ folder..."
          rsync -avz --delete -e "ssh -o StrictHostKeyChecking=no" ./dist/ "${EC2_USER_VAL}"@"${EC2_HOST_VAL}":"${REMOTE_APP_DIR}/"
          
          echo "Copying package.json..."
          rsync -avz --delete -e "ssh -o StrictHostKeyChecking=no" ./package.json "${EC2_USER_VAL}"@"${EC2_HOST_VAL}":"${REMOTE_APP_DIR}/"
          
          echo "Copying package-lock.json..."
          rsync -avz --delete -e "ssh -o StrictHostKeyChecking=no" ./package-lock.json "${EC2_USER_VAL}"@"${EC2_HOST_VAL}":"${REMOTE_APP_DIR}/"

          ssh -t "${EC2_USER_VAL}"@"${EC2_HOST_VAL}" "
            pm2 delete ${APP_NAME} || true;

            cd \"${REMOTE_APP_DIR}\";

            npm install --production

            pm2 start main.js --name ${APP_NAME} --interpreter node -- \
              --env PORT=3000 \
              --env CORS_ORIGIN='${{ vars.CORS_ORIGIN || 'http://localhost:8080' }}' \
              --env API_PREFIX='${{ vars.API_PREFIX || 'api' }}' \
              --env AI_API_BASE_URL='${{ vars.AI_API_BASE_URL || 'https://generativelanguage.googleapis.com/v1beta/models/' }}' \
              --env AI_API_KEY='${{ secrets.AI_API_KEY }}' \
              --env AI_AGENT='${{ vars.AI_AGENT || 'gemini-2.0-flash' }}';

            pm2 save;
            GLOBAL_NPM_BIN_PATH=\$(npm config get prefix)/bin;
            sudo env PATH=\"\$PATH:\${GLOBAL_NPM_BIN_PATH}\" pm2 startup systemd -u ${EC2_USER_VAL} --hp /home/${EC2_USER_VAL};

            pm2 list;
          "
        env:
          EC2_USER: ec2-user
          EC2_HOST: ec2-15-164-171-168.ap-northeast-2.compute.amazonaws.com
          CORS_ORIGIN: ${{ vars.CORS_ORIGIN || 'http://localhost:8080,http://example.com' }}
          API_PREFIX: ${{ vars.API_PREFIX || 'api' }}
          AI_API_BASE_URL: ${{ vars.AI_API_BASE_URL || 'https://generativelanguage.googleapis.com/v1beta/models/' }}
          AI_AGENT: ${{ vars.AI_AGENT || 'gemini-2.0-flash' }}

      - name: Configure Nginx as Reverse Proxy and Reload
        run: |
          NGINX_CONFIG="
            server {
                listen 80;
                server_name $EC2_HOST;

                location / {
                    proxy_pass http://localhost:3000;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $$http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host $$host;
                    proxy_cache_bypass $$http_upgrade;
                    proxy_set_header X-Real-IP $$remote_addr;
                    proxy_set_header X-Forwarded-For $$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $$scheme;
                }
            }
          "
          ssh -t "$EC2_USER"@"$EC2_HOST" "
            echo \"$NGINX_CONFIG\" | sudo tee /etc/nginx/conf.d/jcg-quiz-api.conf > /dev/null;
            echo 'Nginx configuration written to /etc/nginx/conf.d/jcg-quiz-api.conf';
            sudo systemctl reload nginx;
            echo 'Nginx reloaded to apply new config.';
          "
        env:
          EC2_USER: ec2-user
          EC2_HOST: ec2-15-164-171-168.ap-northeast-2.compute.amazonaws.com