name: Deploy NestJS to EC2

on:
  push:
    branches:
      - main # Trigger deployment on pushes to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest # GitHub Actions runner environment

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Checkout your repository code

      - name: Set up SSH agent
        uses: webfactory/ssh-agent@v0.9.0 # Action to set up SSH agent with your private key
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }} # Use the SSH private key from GitHub Secrets

      - name: Add EC2 Host to known_hosts
        # This step ensures the EC2 host's fingerprint is added to known_hosts
        # to prevent SSH connection prompts in non-interactive environment.
        run: |
          mkdir -p ~/.ssh # Create .ssh directory if it doesn't exist
          # Use ssh-keyscan to fetch the host key securely.
          # The -H flag ensures only the hostname is used in known_hosts entry.
          ssh-keyscan -H "$EC2_HOST" >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts # Set correct permissions for known_hosts file
        env:
          # Define EC2_HOST directly in env for this step, matching your provided template
          EC2_HOST: ec2-15-164-171-168.ap-northeast-2.compute.amazonaws.com # Your EC2 DNS

      - name: Setup Node.js environment
        uses: actions/setup-node@v4 # Action to set up Node.js
        with:
          node-version: '20' # Specify your NestJS project's Node.js version

      - name: Install NestJS dependencies
        run: npm install # Install Node.js dependencies for your project

      - name: Build NestJS project
        run: npm run build # Build your NestJS application (creates the 'dist' folder)

      - name: Deploy application files and manage with PM2
        # This step combines SSH commands for EC2 setup and local rsync for file transfer.
        run: |
          # Define common variables used locally and remotely
          EC2_USER_VAL="ec2-user" # Directly define for local use
          EC2_HOST_VAL="ec2-15-164-171-168.ap-northeast-2.compute.amazonaws.com"
          
          # --- Set the application directory name based on your project ---
          APP_NAME="jcg-quiz-api" # <-- Updated to your repository name
          REMOTE_APP_DIR="/home/${EC2_USER_VAL}/${APP_NAME}" # Path on EC2

          # --- Step 1: Prepare EC2 environment (install rsync, create app directory, install pm2) ---
          ssh -t "${EC2_USER_VAL}"@"${EC2_HOST_VAL}" "
            # Ensure rsync is installed
            if ! command -v rsync &> /dev/null; then
              echo 'rsync not found on EC2, installing...';
              sudo yum install rsync -y;
            else
              echo 'rsync is already installed on EC2.';
            fi;

            # Create application directory (double quotes for variable expansion)
            mkdir -p \"${REMOTE_APP_DIR}\";
            echo \"Application directory created/ensured: ${REMOTE_APP_DIR}\";

            # Install PM2 if not found
            # Using npm install -g pm2 via SSH
            if ! command -v pm2 &> /dev/null; then
              echo 'PM2 not found on EC2, installing globally...';
              # Ensure npm's global bin is in PATH for this session if not by default
              export PATH=\$PATH:$(npm config get prefix)/bin;
              npm install -g pm2;
              echo 'PM2 installed.';
            else
              echo 'PM2 is already installed on EC2.';
            fi;
          "

          # --- Step 2: Copy built files from GitHub Actions runner to EC2 ---
          # These rsync commands run *locally* on the GitHub Actions runner,
          # connecting
