# Compiled output directories
# This is the most crucial part: NestJS (TypeScript) compiles to JavaScript
# and typically outputs to 'dist'. Never commit compiled code.
/dist
/build
/.tsbuildinfo # TypeScript build info file for incremental builds

# Node.js dependencies
# The 'node_modules' directory contains all your project's dependencies
# installed by npm, yarn, or pnpm. It's usually very large and can be
# easily regenerated by running 'npm install' (or equivalent).
/node_modules

# Logs
# Log files contain runtime information and are specific to your local
# environment or server instance.
logs
*.log
npm-debug.log*
yarn-debug.log*
pnpm-debug.log*
lerna-debug.log* # For monorepos using Lerna

# Environment variables
# These files often contain sensitive information like API keys,
# database credentials, and other secrets. They should NEVER be
# committed to version control. NestJS's ConfigModule typically
# handles loading these.
.env
.env.*.local
.env.local
.env.development.local
.env.test.local
.env.production.local
# If you use specific environment files like .env.development, .env.production etc.,
# you should explicitly list them here if they contain sensitive data and are not meant to be committed.
# Example:
# .env.development
# .env.production

# Test coverage reports
# These directories are generated when running tests and calculating code coverage.
/coverage
.nyc_output/

# IDE and editor specific files
# Integrated Development Environments (IDEs) and text editors create various
# configuration files for your workspace, project settings, and user preferences.
# These are usually personal and should not be shared across the team unless
# explicitly needed (e.g., VSCode settings for shared linting rules).
.idea/             # IntelliJ IDEA (WebStorm, etc.)
.project           # Eclipse
.classpath         # Eclipse
.c9/               # Cloud9
*.launch           # Eclipse
.settings/         # Eclipse
*.sublime-workspace # Sublime Text
.vscode/           # VSCode specific folder
# !.vscode/settings.json # Uncomment if you want to share specific VSCode settings
# !.vscode/tasks.json    # Uncomment if you want to share specific VSCode tasks
# !.vscode/launch.json   # Uncomment if you want to share specific VSCode launch configs
# !.vscode/extensions.json # Uncomment if you want to share recommended VSCode extensions

# OS specific files
# These are hidden files created by operating systems (macOS, Windows)
# for folder display preferences, thumbnails, etc. They are irrelevant
# to the project code.
.DS_Store    # macOS
Thumbs.db    # Windows
ehthumbs.db  # Windows
Desktop.ini  # Windows

# Database related files (if applicable)
# If your project uses a local database file (e.g., SQLite), or generates
# database-specific temporary files that should not be tracked.
*.sqlite
*.db
/data # Or specific folders where local DB data might reside (e.g., for TypeORM local DB)

# Uploaded files / static assets
# If your application allows user uploads or generates static files that are
# not part of the source code and are typically stored in cloud storage or
# a separate volume in production.
/uploads/
/files/
/public/generated_assets/ # Example for generated frontend assets not meant for source control

# Other temporary files
*.bak
*.tmp
*~
*.swp # Vim swap files
*.swo # Vim swap files

# Package manager specific lock files (Optional)
# Generally, package-lock.json, yarn.lock, pnpm-lock.yaml are COMMITTED
# to ensure consistent dependency installations across environments.
# However, for very specific scenarios (e.g., a library project where you
# manage dependencies differently), you might choose to ignore them.
# For most NestJS applications, you SHOULD NOT ignore these.
package-lock.json
yarn.lock
pnpm-lock.yaml

# NestJS CLI specific (if you initialize without git and add it later)
# Or if you have local CLI configurations that shouldn't be committed.
nest-cli.json.local

.idea